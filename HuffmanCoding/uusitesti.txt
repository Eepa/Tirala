package huffmancoding.logiikka;

import huffmancoding.koodaaja.Node;
import huffmancoding.koodaaja.Tree;

/**
 * Pakkaaja, joka pakkaa käyttäjän antaman tekstin.
 *
 * @author Eveliina
 */
public class Pakkaaja {

    /**
     * Käyttäjän antamien syötteiden käsittelijä.
     */
    private Syotekasittelija syotekasittelija;
    /**
     * Sisältää syötteen merkkien esiintymismäärät.
     */
    private byte[] tavujenFrekvenssitaulukko;
    
    private byte[] tiedostonTavut; 
    private Minimikeko minimikeko;
    private Node[] keko;
    private Tree puu;
    

    /**
     * Konstruktorissa luodaan uusi pakkaaja, joka käsittelee tiedon
     * pakkaamista.
     *
     * @param syotekasittelija Käyttäjän antamien syötteiden käsittelijä.
     */
    public Pakkaaja(Syotekasittelija syotekasittelija) {
        this.syotekasittelija = syotekasittelija;
    }

    /**
     * Käynnistää pakkaajan toiminnan.
     */
    public void kaynnistaPakkaus() {


        String teksti = this.syotekasittelija.lueTiedostopolku("pakkaus");
        this.tiedostonTavut = this.syotekasittelija.muutaTiedostoTavutaulukoksi(teksti);

        int[] frekvenssit = this.syotekasittelija.luoTavuistaFrekvenssitaululukko(tiedostonTavut);

//        for(int i = 0; i < frekvenssit.length; i++){
//            System.out.println("Tavu on: " + (i-128) + " Esiintymiskertojen määrä on: " + frekvenssit[i] + "\n");
//        }

        this.luoMinimikeko(frekvenssit);
//        
//        this.minimikeko.poistaPienin(keko);
//        this.minimikeko.poistaPienin(keko);
//        this.minimikeko.poistaPienin(keko);
//
//        this.minimikeko.lisaaAlkioKekoon(keko, new Node(800, 1));
//
//        for (int i = 0; i <= this.keko[256].getMaara(); i++) {
//            System.out.println("Solmu: " + this.keko[i].getTavu() + " Tavun määrä: " + this.keko[i].getMaara());
//
//        }
//        System.out.println(this.keko[256].getMaara());
//
//
//        this.minimikeko.poistaPienin(keko);
//        this.minimikeko.poistaPienin(keko);
//
//        for (int i = 0; i <= this.keko[256].getMaara(); i++) {
//            System.out.println("Solmu: " + this.keko[i].getTavu() + " Tavun määrä: " + this.keko[i].getMaara());
//
//        }
//        System.out.println(this.keko[256].getMaara());

//        
        this.muodostaPuu();

    }

    /**
     * Luo uuden minimikeon annettujen frekvenssien perusteella.
     *
     * @param frekvenssit Taulukko, jonka tietojen perusteella uusi keko
     * luodaan.
     */
    public void luoMinimikeko(int[] frekvenssit) {
        this.minimikeko = new Minimikeko(frekvenssit);

        this.keko = minimikeko.luoSolmut();

        for (int i = (this.keko[256].getMaara() / 2) - 1; i >= 0; i--) {
            this.keko = minimikeko.heapify(this.keko, i, this.keko[256].getMaara());
        }

    }
    
    /**
     * Muodostaa Huffman koodauksen puun annetusta keosta.
     */

    public void muodostaPuu() {

        for (int i = 0; i <= this.keko[256].getMaara(); i++) {
            System.out.println("Solmu: " + this.keko[i].getTavu() + " Tavun määrä: " + this.keko[i].getMaara());

        }

        System.out.println(this.keko[256].getMaara());


        int laskuri = 0;

        int lahtoarvo = this.keko[256].getMaara() * 3;

        while (laskuri < lahtoarvo) {


            Node ensimmainenSolmu = this.minimikeko.poistaPienin(this.keko);
            laskuri++;


            Node toinenSolmu = this.minimikeko.poistaPienin(this.keko);
            laskuri++;



            Node uusiParentSolmu = new Node(-1000, ensimmainenSolmu.getMaara() + toinenSolmu.getMaara(), ensimmainenSolmu, toinenSolmu);

            this.minimikeko.lisaaAlkioKekoon(this.keko, uusiParentSolmu);
            laskuri++;



        }

        for (int i = 0; i <= this.keko[256].getMaara(); i++) {
            System.out.println("Solmu: " + this.keko[i].getTavu() + " Tavun määrä: " + this.keko[i].getMaara());

        }

        System.out.println(this.keko[256].getMaara());

        this.puu = new Tree(this.minimikeko.poistaPienin(this.keko));
        
        this.puu.tulostaAlkiotPreorder(this.puu.getJuuri() );
        System.out.println("\n");
        
//        this.puu.tulostaAlkiotPostorder(this.puu.getJuuri() );
//        System.out.println("\n");
//        
//        this.puu.tulostaAlkiotInorder(this.puu.getJuuri() );
//        System.out.println("\n");
        
        String[] taulukko = new String[256];
        
        taulukko = this.puu.muodostaUudetKoodit(taulukko, "", this.puu.getJuuri());
        
        for(int i = 0; i < taulukko.length; i++){
            if(taulukko[i] != null){
                System.out.println("Tavun nimi: " + (i-128) +" Uusi koodi: "+ taulukko[i]);
            }
            
        }

    }
}
